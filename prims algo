#include <iostream>
#include <climits>
using namespace std;
 
int findMinKey(int key[], bool mstSet[], int V) {
   int min = INT_MAX, minIndex;
 
   for (int v = 0; v < V; v++) {
       if (!mstSet[v] && key[v] < min) {
           min = key[v];
           minIndex = v;
       }
   }
   return minIndex;
}
 
void printMST(int parent[], int graph[][100], int V) {
   cout << "Edge \tWeight\n";
   for (int i = 1; i < V; i++) {
       cout << parent[i] << " - " << i << " \t" << graph[i][parent[i]] << "\n";
   }
}
 
void primMST(int graph[][100], int V) {
   int parent[V];
   int key[V];
   bool mstSet[V];
 
   for (int i = 0; i < V; i++) {
       key[i] = INT_MAX;
       mstSet[i] = false;
   }
 
   key[0] = 0;
   parent[0] = -1;
 
   for (int count = 0; count < V - 1; count++) {
       int u = findMinKey(key, mstSet, V);
       mstSet[u] = true;
 
       for (int v = 0; v < V; v++) {
           if (graph[u][v] && !mstSet[v] && graph[u][v] < key[v]) {
               parent[v] = u;
               key[v] = graph[u][v];
           }
       }
   }
 
   printMST(parent, graph, V);
}
 
int main() {
   int V;
   cout << "Enter the number of vertices: ";
   cin >> V;
 
   int graph[V][100]; 
 
   cout << "Enter the adjacency matrix (enter 0 for no edge, positive values for edge weights):\n";
   for (int i = 0; i < V; i++) {
       for (int j = 0; j < V; j++) {
           cin >> graph[i][j];
       }
   }
 
   primMST(graph, V);
   return 0;
}
