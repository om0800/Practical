#include <iostream>
 
using namespace std;
 
class Node {
public:
   int data;
   Node* next;
};
 
class Queue {
   Node *front, *rear;
public:
   Queue() { front = rear = nullptr; }
   
   void enqueue(int x) {
       Node* temp = new Node();
       temp->data = x;
       temp->next = nullptr;
       if (!rear) {
           front = rear = temp;
           return;
       }
       rear->next = temp;
       rear = temp;
   }
   
   void dequeue() {
       if (!front) {
           cout << "Queue Underflow\n";
           return;
       }
       Node* temp = front;
       cout << "Dequeued: " << front->data << "\n";
       front = front->next;
       if (!front) rear = nullptr;
       delete temp;
   }
   
   void display() {
       if (!front) {
           cout << "Queue is empty\n";
           return;
       }
       Node* temp = front;
       cout << "Queue: ";
       while (temp) {
           cout << temp->data << " ";
           temp = temp->next;
       }
       cout << "\n";
   }
};
 
int main() {
   Queue q;
   int choice, value;
 
   do {
       cout << "\nQueue Operations:\n";
       cout << "1. Enqueue\n";
       cout << "2. Dequeue\n";
       cout << "3. Display\n";
       cout << "4. Exit\n";
       cout << "Enter your choice: ";
       cin >> choice;
 
       switch (choice) {
           case 1:
               cout << "Enter value to enqueue: ";
               cin >> value;
               q.enqueue(value);
               break;
           case 2:
               q.dequeue();
               break;
           case 3:
               q.display();
               break;
           case 4:
               cout << "Exiting...\n";
               break;
           default:
               cout << "Invalid choice, try again.\n";
       }
   } while (choice != 4);
 
   return 0;
}                cout << "Invalid choice, try again.\n";
       }
   } while (choice != 4);
 
   return 0;
}
