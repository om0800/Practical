#include <iostream>
#include <climits>
using namespace std;
 
int findMinDistance(int dist[], bool sptSet[], int V) {
   int min = INT_MAX, minIndex;
 
   for (int v = 0; v < V; v++) {
       if (!sptSet[v] && dist[v] <= min) {
           min = dist[v];
           minIndex = v;
       }
   }
   return minIndex;
}
 
void printSolution(int dist[], int V) {
   cout << "Vertex \tDistance from Source\n";
   for (int i = 0; i < V; i++) {
       cout << i << " \t" << dist[i] << "\n";
   }
}
 
void dijkstra(int **graph, int V, int src) {
   int dist[V];
   bool sptSet[V];
 
   for (int i = 0; i < V; i++) {
       dist[i] = INT_MAX;
       sptSet[i] = false;
   }
 
   dist[src] = 0;
 
   for (int count = 0; count < V - 1; count++) {
       int u = findMinDistance(dist, sptSet, V);
       sptSet[u] = true;
 
       for (int v = 0; v < V; v++) {
           if (!sptSet[v] && graph[u][v] && dist[u] != INT_MAX &&
               dist[u] + graph[u][v] < dist[v]) {
               dist[v] = dist[u] + graph[u][v];
           }
       }
   }
 
   printSolution(dist, V);
}
 
int main() {
   int V;
   cout << "Enter the number of vertices: ";
   cin >> V;
 
   int *graph = new int[V];
   for (int i = 0; i < V; i++) {
       graph[i] = new int[V];
   }
 
   cout << "Enter the adjacency matrix (use 0 for no edge):\n";
   for (int i = 0; i < V; i++) {
       for (int j = 0; j < V; j++) {
           cin >> graph[i][j];
       }
   }
 
   int src;
   cout << "Enter the source vertex (0 to " << V - 1 << "): ";
   cin >> src;
 
   dijkstra(graph, V, src);
 
   for (int i = 0; i < V; i++) {
       delete[] graph[i];
   }
   delete[] graph;
 
   return 0;
}
