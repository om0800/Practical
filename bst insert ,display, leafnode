#include <iostream>
using namespace std;
 
struct Node {
   int data;
   Node* left;
   Node* right;
};
 
Node* createNode(int data) {
   Node* newNode = new Node();
   newNode->data = data;
   newNode->left = newNode->right = nullptr;
   return newNode;
}
 
Node* insert(Node* root, int data) {
   if (!root) return createNode(data);
   if (data < root->data)
       root->left = insert(root->left, data);
   else
       root->right = insert(root->right, data);
   return root;
}
 
void display(Node* root) {
   if (!root) return;
   cout << root->data << " ";
   display(root->left);
   display(root->right);
}
 
void displayLeafNodes(Node* root) {
   if (!root) return;
   if (!root->left && !root->right) {
       cout << root->data << " ";
       return;
   }
   displayLeafNodes(root->left);
   displayLeafNodes(root->right);
}
 
int main() {
   Node* root = nullptr;
   int choice, value;
 
   do {
       cout << "\nBinary Tree Operations:\n";
       cout << "1. Insert a node\n";
       cout << "2. Display tree (preorder)\n";
       cout << "3. Display leaf nodes\n";
       cout << "4. Exit\n";
       cout << "Enter your choice: ";
       cin >> choice;
 
       switch (choice) {
           case 1:
               cout << "Enter value to insert: ";
               cin >> value;
               root = insert(root, value);
               break;
 
           case 2:
               cout << "Tree (Preorder Traversal): ";
               display(root);
               cout << "\n";
               break;
 
           case 3:
               cout << "Leaf Nodes: ";
               displayLeafNodes(root);
               cout << "\n";
               break;
 
           case 4:
               cout << "Exiting...\n";
               break;
 
           default:
               cout << "Invalid choice. Please try again.\n";
       }
   } while (choice != 4);
 
   return 0;
}
